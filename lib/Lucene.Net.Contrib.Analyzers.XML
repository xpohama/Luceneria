<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lucene.Net.Analyzers</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicAnalyzer" -->
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.DEFAULT_STOPWORD_FILE">
            File containing default Arabic stopwords.
            
            Default stopword list is from http://members.unine.ch/jacques.savoy/clef/index.html
            The stopword list is BSD-Licensed.
        </member>
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.stoptable">
            Contains the stopwords used with the StopFilter.
        </member>
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.STOPWORDS_COMMENT">
            The comment character in the stopwords file.  All lines prefixed with this will be ignored  
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor">
             Builds an analyzer with the default stop words: {@link #DEFAULT_STOPWORD_FILE}.
            
             @deprecated Use {@link #ArabicAnalyzer(Version)} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version)">
            Builds an analyzer with the default stop words: {@link #DEFAULT_STOPWORD_FILE}.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(System.String[])">
             Builds an analyzer with the given stop words.
            
             @deprecated Use {@link #ArabicAnalyzer(Version, String[])} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version,System.String[])">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(System.Collections.Hashtable)">
             Builds an analyzer with the given stop words.
            
             @deprecated Use {@link #ArabicAnalyzer(Version, Hashtable)} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version,System.Collections.Hashtable)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.TokenStream(System.String,System.IO.TextReader)">
             Creates a {@link TokenStream} which tokenizes all the text in the provided {@link Reader}.
            
             @return  A {@link TokenStream} built from an {@link ArabicLetterTokenizer} filtered with
             			{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
                        and {@link ArabicStemFilter}.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
             Returns a (possibly reused) {@link TokenStream} which tokenizes all the text 
             in the provided {@link Reader}.
            
             @return  A {@link TokenStream} built from an {@link ArabicLetterTokenizer} filtered with
                        {@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
                        and {@link ArabicStemFilter}.
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicNormalizationFilter">
            A {@link TokenFilter} that applies {@link ArabicNormalizer} to normalize the orthography.
            
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianStemmer.TERM">
            Changed term
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.Stem(System.String)">
             Stemms the given term to an unique <tt>discriminator</tt>.
            
             @param term  The term that should be stemmed.
             @return      Discriminator for <tt>term</tt>
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isStemmable(System.String)">
             Checks a term if it can be processed correctly.
            
             @return  true if, and only if, the given term consists in letters.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isIndexable(System.String)">
             Checks a term if it can be processed indexed.
            
             @return  true if it can be indexed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isVowel(System.Char)">
                     * See if string is 'a','e','i','o','u'
                   *
                   * @return true if is vowel
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.getR1(System.String)">
                     * Gets R1
                   *
                   * R1 - is the region after the first non-vowel follwing a vowel,
                   *      or is the null region at the end of the word if there is
                   *      no such non-vowel.
                   *
                   * @return null or a string representing R1
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.getRV(System.String)">
                     * Gets RV
                   *
                   * RV - IF the second letter is a consoant, RV is the region after
                   *      the next following vowel,
                   *
                   *      OR if the first two letters are vowels, RV is the region
                   *      after the next consoant,
                   *
                   *      AND otherwise (consoant-vowel case) RV is the region after
                   *      the third letter.
                   *
                   *      BUT RV is the end of the word if this positions cannot be
                   *      found.
                   *
                   * @return null or a string representing RV
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.changeTerm(System.String)">
             1) Turn to lowercase
             2) Remove accents
             3) ã -> a ; õ -> o
             4) ç -> c
            
             @return null or a string transformed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.suffix(System.String,System.String)">
             Check if a string ends with a suffix
            
             @return true if the string ends with the specified suffix
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.replaceSuffix(System.String,System.String,System.String)">
             Replace a string suffix by another
            
             @return the replaced string
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.removeSuffix(System.String,System.String)">
             Remove a string suffix
            
             @return the string without the suffix
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.suffixPreceded(System.String,System.String,System.String)">
             See if a suffix is preceded by a string
            
             @return true if the suffix is preceded
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.createCT(System.String)">
            Creates CT (changed term) , substituting * 'ã' and 'õ' for 'a~' and 'o~'.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step1">
                     * Standart suffix removal.
                   * Search for the longest among the following suffixes, and perform
                   * the following actions:
                   *
                   * @return false if no ending was removed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step2">
                     * Verb suffixes.
                   *
                   * Search for the longest among the following suffixes in RV,
                   * and if found, delete.
                   *
                   * @return false if no ending was removed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step3">
                     * Delete suffix 'i' if in RV and preceded by 'c'
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step4">
                     * Residual suffix
                   *
                   * If the word ends with one of the suffixes (os a i o á í ó)
                   * in RV, delete it
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step5">
                     * If the word ends with one of ( e é ê) in RV,delete it,
                   * and if preceded by 'gu' (or 'ci') with the 'u' (or 'i') in RV,
                   * delete the 'u' (or 'i')
                   *
                   * Or if the word ends ç remove the cedilha
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.Log">
             For log and debug purpose
            
             @return  TERM, CT, RV, R1 and R2
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.BRAZILIAN_STOP_WORDS">
            List of typical Brazilian stopwords.
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.stoptable">
            Contains the stopwords used with the StopFilter.
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.excltable">
            Contains words that should be indexed but not stemmed.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor">
            Builds an analyzer with the default stop words ({@link #BRAZILIAN_STOP_WORDS}).
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.String[])">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.Collections.Hashtable)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.IO.FileInfo)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.String[])">
            Builds an exclusionlist from an array of Strings.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.Collections.Hashtable)">
            Builds an exclusionlist from a Hashtable.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.IO.FileInfo)">
            Builds an exclusionlist from the words contained in the given file.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.TokenStream(System.String,System.IO.TextReader)">
             Creates a TokenStream which tokenizes all the text in the provided Reader.
            
             @return  A TokenStream build from a StandardTokenizer filtered with
             			StandardFilter, StopFilter, GermanStemFilter and LowerCaseFilter.
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicStemFilter">
            A {@link TokenFilter} that applies {@link ArabicStemmer} to stem Arabic words..
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicStemmer" -->
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.Stem(System.Char[],System.Int32)">
            Stem an input buffer of Arabic text.
            
            @param s input buffer
            @param len length of input buffer
            @return length of input buffer after normalization
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StemPrefix(System.Char[],System.Int32)">
            Stem a prefix off an Arabic word.
            @param s input buffer
            @param len length of input buffer
            @return new length of input buffer after stemming.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StemSuffix(System.Char[],System.Int32)">
            Stem suffix(es) off an Arabic word.
            @param s input buffer
            @param len length of input buffer
            @return new length of input buffer after stemming
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StartsWith(System.Char[],System.Int32,System.Char[])">
            Returns true if the prefix matches and can be stemmed
            @param s input buffer
            @param len length of input buffer
            @param prefix prefix to check
            @return true if the prefix matches and can be stemmed
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.EndsWith(System.Char[],System.Int32,System.Char[])">
            Returns true if the suffix matches and can be stemmed
            @param s input buffer
            @param len length of input buffer
            @param suffix suffix to check
            @return true if the suffix matches and can be stemmed
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.DeleteN(System.Char[],System.Int32,System.Int32,System.Int32)">
            Delete n characters in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len Length of input buffer
            @param nChars number of characters to delete
            @return length of input buffer after deletion
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.Delete(System.Char[],System.Int32,System.Int32)">
            Delete a character in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len length of input buffer
            @return length of input buffer after deletion
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicLetterTokenizer">
             Tokenizer that breaks text into runs of letters and diacritics.
             <p>
             The problem with the standard Letter tokenizer is that it fails on diacritics.
             Handling similar to this is necessary for Indic Scripts, Hebrew, Thaana, etc.
             </p>
            
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicLetterTokenizer.IsTokenChar(System.Char)">
            Allows for Letter category or NonspacingMark category
            @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianStemFilter.stemmer">
            The actual token in the input stream.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemFilter.Next(Lucene.Net.Analysis.Token)">
            @return Returns the next token in the stream, or null at EOS.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicNormalizer" -->
        <member name="M:Lucene.Net.Analysis.AR.ArabicNormalizer.Normalize(System.Char[],System.Int32)">
            Normalize an input buffer of Arabic text
            
            @param s input buffer
            @param len length of input buffer
            @return length of input buffer after normalization
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicNormalizer.Delete(System.Char[],System.Int32,System.Int32)">
            Delete a character in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len length of input buffer
            @return length of input buffer after deletion
        </member>
    </members>
</doc>
